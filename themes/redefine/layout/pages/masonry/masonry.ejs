<h1 class="page-title-header">
    <%- getPageTitle(page) %>
</h1>

<h4>第一次打开好像不能自动显示，要刷新一下此页面才行，暂时还没找到具体原因，后面再修复吧。</h4>
<br>

<div id="loading-placeholder" class="loading-placeholder">
    <div class="flex-grid generic-card" style="display: none; flex-wrap: wrap; gap: 5px; width: 100%;">
        <% for(let i=0; i<4; i++) { %>
            <div class="card loading" style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;"></div>
        <% } %>
    </div>
</div>

<div class="masonry-grid-container">
    <div id="masonry-grid"></div>
    <div id="no-images-message" class="no-images-message" style="display: none;">暂无图片数据。请在主题配置中添加瀑布流图片数据。</div>
</div>

<div class="load-more-container">
    <button id="load-more-btn" class="load-more-btn">加载更多</button>
</div>

<script>
    (function() {
        function initMasonry() {
            // 清理已存在的查看器
            document.querySelectorAll('div.image-viewer-container').forEach(el => el.remove());
            
            // 获取DOM元素
            const masonryGrid = document.getElementById('masonry-grid');
            const loadMoreBtn = document.getElementById('load-more-btn');
            const loadingPlaceholder = document.getElementById('loading-placeholder');
            const noImagesMessage = document.getElementById('no-images-message');
            
            // 配置项
            const batchSize = 5;
            let currentIndex = 0;
            
            // 获取图片数据
            let allImages = [];
            try {
                <% if (typeof theme !== 'undefined' && theme.masonry) { %>
                    allImages = <%- JSON.stringify(theme.masonry) %>;
                <% } %>
            } catch (e) {
                console.error('Error getting image data:', e);
            }
            
            // 无图片处理
            if (!allImages || allImages.length === 0) {
                noImagesMessage.style.display = 'block';
                loadMoreBtn.style.display = 'none';
                loadingPlaceholder.style.display = 'none';
                return;
            }
            
            // 工具函数
            const utils = {
                // 打乱数组
                shuffleArray(array) {
                    const newArray = [...array];
                    for (let i = newArray.length - 1; i > 0; i--) {
                        const j = Math.floor(Math.random() * (i + 1));
                        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
                    }
                    return newArray;
                },
                
                // 防抖函数
                debounce(fn, delay) {
                    let timer;
                    return function() {
                        clearTimeout(timer);
                        timer = setTimeout(() => fn.apply(this, arguments), delay);
                    };
                },
                
                // 设置加载状态
                setLoadingState(isLoading) {
                    loadMoreBtn.textContent = isLoading ? '加载中...' : '加载更多';
                    loadMoreBtn.disabled = isLoading;
                    loadMoreBtn.classList.toggle('loading', isLoading);
                },
                
                // 设置行跨度
                setRowSpan(item) {
                    const container = item.querySelector('.image-container');
                    const rowHeight = 55; // 对应CSS中的grid-auto-rows
                    const contentHeight = container.offsetHeight;
                    const rowSpan = Math.ceil(contentHeight / rowHeight);
                    item.style.gridRow = `span ${rowSpan}`;
                }
            };
            
            // 图片查看器
            const imageViewer = {
                setup() {
                    if (!document.getElementById('image-viewer')) {
                        const viewer = document.createElement('div');
                        viewer.id = 'image-viewer';
                        viewer.innerHTML = `
                            <div class="viewer-backdrop"></div>
                            <div class="viewer-container">
                                <img id="viewer-image" src="" alt="">
                                <button class="viewer-close">&times;</button>
                            </div>
                        `;
                        document.body.appendChild(viewer);
                        
                        viewer.querySelector('.viewer-backdrop').addEventListener('click', this.close);
                        viewer.querySelector('.viewer-close').addEventListener('click', this.close);
                    }
                    
                    masonryGrid.addEventListener('click', (e) => {
                        const container = e.target.closest('.image-container');
                        if (container) {
                            const fullImageUrl = container.getAttribute('data-full-image');
                            if (fullImageUrl) this.open(fullImageUrl);
                        }
                    });
                },
                
                open(imageUrl) {
                    const viewer = document.getElementById('image-viewer');
                    document.getElementById('viewer-image').src = imageUrl;
                    viewer.classList.add('active');
                    document.body.style.overflow = 'hidden';
                },
                
                close() {
                    document.getElementById('image-viewer').classList.remove('active');
                    document.body.style.overflow = '';
                }
            };
            
            // 图片加载
            const imageLoader = {
                createImageElement(imageData) {
                    const item = document.createElement('div');
                    item.className = 'masonry-item';
                    
                    item.innerHTML = `
                        <div class="image-container" data-full-image="${imageData.image}">
                            <div class="image-placeholder"></div>
                            <img data-src="${imageData.image}" alt="${imageData.title || ''}" class="lazy-image">
                            <div class="image-overlay">
                                <div class="image-title">${imageData.title || ''}</div>
                                <div class="image-description">${imageData.description || ''}</div>
                            </div>
                        </div>
                    `;
                    
                    // 预加载获取尺寸
                    const tempImg = new Image();
                    tempImg.onload = function() {
                        const ratio = tempImg.width / tempImg.height;
                        item.querySelector('.image-container').style.paddingBottom = `${(1/ratio) * 100}%`;
                        utils.setRowSpan(item);
                    };
                    tempImg.src = imageData.image;
                    
                    return item;
                },
                
                setupLazyLoading() {
                    const lazyImages = document.querySelectorAll('.lazy-image');
                    let loadedCount = 0;
                    const totalToLoad = lazyImages.length;
                    
                    if (totalToLoad > 0) {
                        utils.setLoadingState(true);
                    }
                    
                    function onImageLoad(img) {
                        img.classList.remove('lazy-image', 'loading');
                        const item = img.closest('.masonry-item');
                        utils.setRowSpan(item);
                        
                        const placeholder = img.previousElementSibling;
                        if (placeholder?.classList.contains('image-placeholder')) {
                            placeholder.style.display = 'none';
                        }
                        
                        if (++loadedCount >= totalToLoad) {
                            utils.setLoadingState(false);
                        }
                    }
                    
                    if ('IntersectionObserver' in window) {
                        const imageObserver = new IntersectionObserver((entries) => {
                            entries.forEach(entry => {
                                if (entry.isIntersecting) {
                                    const img = entry.target;
                                    img.classList.add('loading');
                                    img.onload = () => onImageLoad(img);
                                    img.onerror = () => loadedCount++;
                                    img.src = img.dataset.src;
                                    imageObserver.unobserve(img);
                                }
                            });
                        }, { rootMargin: '200px 0px' });
                        
                        lazyImages.forEach(img => imageObserver.observe(img));
                    } else {
                        lazyImages.forEach(img => {
                            img.classList.add('loading');
                            img.onload = () => onImageLoad(img);
                            img.onerror = () => loadedCount++;
                            img.src = img.dataset.src;
                        });
                    }
                },
                
                loadMoreImages() {
                    // 重新洗牌剩余图片
                    if (currentIndex < allImages.length) {
                        const remainingImages = allImages.slice(currentIndex);
                        allImages = [
                            ...allImages.slice(0, currentIndex), 
                            ...utils.shuffleArray(remainingImages)
                        ];
                    }
                    
                    const endIndex = Math.min(currentIndex + batchSize, allImages.length);
                    
                    // 添加新图片
                    for (let i = currentIndex; i < endIndex; i++) {
                        if (allImages[i]) {
                            masonryGrid.appendChild(this.createImageElement(allImages[i]));
                        }
                    }
                    
                    currentIndex = endIndex;
                    this.setupLazyLoading();
                    
                    // 处理加载完成情况
                    if (currentIndex >= allImages.length) {
                        loadMoreBtn.style.display = 'none';
                    }
                }
            };
            
            // 初始化
            allImages = utils.shuffleArray(allImages);
            loadingPlaceholder.style.display = 'none';
            masonryGrid.style.display = 'grid';
            
            // 加载初始图片
            loadMoreBtn.addEventListener('click', () => imageLoader.loadMoreImages());
            imageViewer.setup();
            imageLoader.loadMoreImages();
            
            // 响应窗口大小变化
            window.addEventListener('resize', utils.debounce(() => {
                document.querySelectorAll('.masonry-item').forEach(utils.setRowSpan);
            }, 100));
        }

        // DOM加载检查
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initMasonry);
        } else {
            initMasonry();
        }
    })();
</script>

<style>
    .masonry-grid-container {
        width: 100%;
        padding: 0 10px;
        box-sizing: border-box;
    }
    
    #masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        grid-auto-rows: 40px;
        grid-gap: 20px;
        width: 100%;
        margin-bottom: 30px;
    }
    
    .masonry-item {
        width: 100%;
        break-inside: avoid;
        position: relative;
        box-sizing: border-box;
    }
    
    .image-container {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
        background-color: #f5f5f5;
        width: 100%;
        height: 0;
        cursor: pointer;
    }
    
    .image-container:hover {
        transform: translateY(-5px);
    }
    
    .image-placeholder {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-animation 1.5s infinite;
        z-index: 1;
    }
    
    .image-container img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        z-index: 2;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    img:not(.lazy-image) {
        opacity: 1;
    }
    
    .image-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
        padding: 20px 10px 10px;
        box-sizing: border-box;
        z-index: 3;
    }
    
    .image-title {
        color: white;
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .image-description {
        color: rgba(255,255,255,0.9);
        font-size: 0.9em;
    }
    
    /* 按钮和加载样式 */
    .load-more-container {
        text-align: center;
        margin: 30px 0;
        padding-top: 20px;
        position: relative;
        z-index: 10;
    }
    
    .load-more-btn {
        padding: 10px 20px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    
    .load-more-btn:hover {
        background-color: #2980b9;
    }
    
    .load-more-btn.loading {
        background-color: #95a5a6;
        cursor: not-allowed;
    }
    
    /* 加载占位符样式 */
    .loading-placeholder {
        width: 100%;
        margin: 20px 0;
    }
    
    .flex-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
    }
    
    .card.loading, .image-placeholder {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-animation 1.5s infinite;
    }
    
    .card.loading {
        border-radius: 8px;
    }
    
    /* 图片查看器样式 */
    #image-viewer {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 9999;
        display: none;
    }
    
    #image-viewer.active {
        display: block;
    }
    
    .viewer-backdrop {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
    }
    
    .viewer-container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        max-width: 90%;
        max-height: 90%;
    }
    
    #viewer-image {
        max-width: 100%;
        max-height: 90vh;
        box-shadow: 0 5px 25px rgba(0,0,0,0.5);
        display: block;
        margin: 0 auto;
    }
    
    .viewer-close {
        position: absolute;
        top: -40px;
        right: 0;
        background: none;
        border: none;
        color: white;
        font-size: 30px;
        cursor: pointer;
        padding: 5px 10px;
    }
    
    .no-images-message {
        text-align: center;
        padding: 30px;
        background-color: #f8f9fa;
        border-radius: 8px;
        margin: 20px 0;
        color: #666;
        font-size: 16px;
    }
    
    @keyframes loading-animation {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
    }
    
    @media (max-width: 576px) {
        .card.loading {
            width: 100%;
            height: 150px;
        }
        
        #masonry-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            grid-gap: 10px;
        }
        
        #viewer-image {
            max-height: 80vh;
        }
    }
</style>