<%
// 确保 images 变量存在，如果不存在则提供一个默认值
const masonryImages = typeof images !== 'undefined' ? images : (theme && theme.masonry ? theme.masonry : []);
// 初始加载的图片数量
const initialLoadCount = 10;
%>

<h1 class="page-title-header">
    <%- getPageTitle(page) %>
</h1>

<div class="loading-placeholder">
	<div style="display: none; flex-wrap: wrap; gap: 5px; width: 100%;" class="flex-grid generic-card">
		<div style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;" class="card loading"></div>
		<div style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;" class="card loading"></div>
		<div style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;" class="card loading"></div>
		<div style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;" class="card loading"></div>
	</div>
</div>

<div class="masonry-grid-container">
    <div id="masonry-grid"></div>
</div>

<div class="load-more-container">
    <button id="load-more-btn" class="load-more-btn">加载更多</button>
</div>

<script>
    // 全局变量，确保在所有地方都可用
    let masonryGrid, loadMoreBtn, loadingPlaceholder;
    let allImages = <%- JSON.stringify(masonryImages) %>; // 使用安全检查后的 masonryImages
    let currentIndex = 0;
    const batchSize = <%= initialLoadCount %>;

    // 在脚本顶部定义初始化函数，并立即尝试执行
    function initializeMasonry() {
        console.log("初始化瀑布流布局...");
        
        // 获取DOM元素
        masonryGrid = document.getElementById('masonry-grid');
        loadMoreBtn = document.getElementById('load-more-btn');
        loadingPlaceholder = document.querySelector('.loading-placeholder');
        
        if (!masonryGrid || !loadMoreBtn) {
            console.error("无法找到必要的DOM元素，将在100ms后重试");
            setTimeout(initializeMasonry, 100);
            return;
        }
        
        // 确保我们有图片数据
        if (!allImages || !Array.isArray(allImages) || allImages.length === 0) {
            console.error("图片数据无效或为空:", allImages);
            if (loadMoreBtn) loadMoreBtn.style.display = 'none';
            if (loadingPlaceholder) loadingPlaceholder.style.display = 'none';
            if (masonryGrid) {
                masonryGrid.innerHTML = '<div class="no-images-message">暂无图片</div>';
                masonryGrid.style.display = 'block';
            }
            return;
        }
        
        console.log(`找到 ${allImages.length} 张图片`);
        
        // 打乱图片数组顺序
        allImages = shuffleArray(allImages);
        
        // 隐藏加载占位符
        hideLoadingPlaceholder();
        
        // 设置事件监听器
        loadMoreBtn.addEventListener('click', function() {
            console.log("加载更多按钮被点击");
            loadMoreImages();
        });
        
        // 初始加载第一批图片
        loadMoreImages();
        
        // 窗口大小调整处理
        let resizeTimeout;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                // 重新计算所有已加载图片的行跨度
                document.querySelectorAll('.masonry-item').forEach(item => {
                    setRowSpan(item);
                });
            }, 100);
        });
        
        console.log("瀑布流布局初始化完成");
    }
    
    // 打乱图片数组顺序
    function shuffleArray(array) {
        const newArray = [...array]; // 创建副本以避免修改原数组
        for (let i = newArray.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
        }
        return newArray;
    }
    
    // 隐藏加载占位符
    function hideLoadingPlaceholder() {
        if (loadingPlaceholder) {
            loadingPlaceholder.style.display = 'none';
        }
        if (masonryGrid) {
            masonryGrid.style.display = 'grid';
        }
    }
    
    // 创建图片元素
    function createImageElement(imageData) {
        try {
            const item = document.createElement('div');
            item.className = 'masonry-item';
            
            // 安全检查图片数据
            if (!imageData || typeof imageData !== 'object') {
                console.error("无效的图片数据:", imageData);
                return item;
            }
            
            // 添加占位符和默认宽高比数据
            const aspectRatio = imageData.aspectRatio || 1.5; // 默认宽高比，如果没有提供
            const imageUrl = imageData.image || '';
            const title = (imageData.title || '').toString();
            const description = (imageData.description || '').toString();
            
            item.innerHTML = `
                <div class="image-container" style="padding-bottom: ${(1/aspectRatio) * 100}%;">
                    <div class="image-placeholder"></div>
                    <img data-src="${imageUrl}" alt="${title}" class="lazy-image">
                    <div class="image-overlay">
                        <div class="image-title">${title}</div>
                        <div class="image-description">${description}</div>
                    </div>
                </div>
            `;
            
            // 预加载图片以获取准确尺寸
            const tempImg = new Image();
            tempImg.onerror = function() {
                console.error("图片加载失败:", imageUrl);
            };
            tempImg.onload = function() {
                const actualRatio = tempImg.width / tempImg.height;
                const container = item.querySelector('.image-container');
                if (container) {
                    container.style.paddingBottom = `${(1/actualRatio) * 100}%`;
                    setRowSpan(item);
                }
            };
            tempImg.src = imageUrl;
            
            return item;
        } catch (error) {
            console.error("创建图片元素时出错:", error);
            return document.createElement('div'); // 返回空元素避免崩溃
        }
    }
    
    // 设置行跨度
    function setRowSpan(item) {
        try {
            const container = item.querySelector('.image-container');
            if (!container) return;
            
            const rowHeight = 40; // 与CSS中的grid-auto-rows保持一致
            const contentHeight = container.offsetHeight;
            const rowSpan = Math.max(1, Math.ceil(contentHeight / rowHeight));
            item.style.gridRow = `span ${rowSpan}`;
        } catch (error) {
            console.error("设置行跨度时出错:", error);
        }
    }
    
    // 懒加载图片
    function setupLazyLoading() {
        try {
            const lazyImages = document.querySelectorAll('.lazy-image');
            console.log(`设置${lazyImages.length}张图片的懒加载`);
            
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            
                            // 设置图片加载状态类
                            img.classList.add('loading');
                            
                            img.onload = function() {
                                img.classList.remove('lazy-image', 'loading');
                                // 图片加载后微调布局
                                const item = img.closest('.masonry-item');
                                if (item) {
                                    requestAnimationFrame(() => {
                                        setRowSpan(item);
                                    });
                                }
                                
                                // 隐藏占位符
                                const placeholder = img.previousElementSibling;
                                if (placeholder && placeholder.classList.contains('image-placeholder')) {
                                    placeholder.style.display = 'none';
                                }
                            };
                            
                            img.onerror = function() {
                                console.error("无法加载图片:", img.dataset.src);
                                img.classList.remove('loading');
                            };
                            
                            img.src = img.dataset.src;
                            imageObserver.unobserve(img);
                        }
                    });
                }, {
                    rootMargin: '200px 0px'
                });
                
                lazyImages.forEach(img => {
                    imageObserver.observe(img);
                });
            } else {
                // 浏览器不支持 IntersectionObserver 的回退
                lazyImages.forEach(img => {
                    img.classList.add('loading');
                    img.onload = function() {
                        img.classList.remove('lazy-image', 'loading');
                        const item = img.closest('.masonry-item');
                        if (item) {
                            setRowSpan(item);
                        }
                        
                        // 隐藏占位符
                        const placeholder = img.previousElementSibling;
                        if (placeholder && placeholder.classList.contains('image-placeholder')) {
                            placeholder.style.display = 'none';
                        }
                    };
                    img.onerror = function() {
                        console.error("无法加载图片:", img.dataset.src);
                        img.classList.remove('loading');
                    };
                    img.src = img.dataset.src;
                });
            }
        } catch (error) {
            console.error("设置懒加载时出错:", error);
        }
    }
    
    // 加载更多图片
    function loadMoreImages() {
        try {
            console.log(`加载更多图片: 当前索引=${currentIndex}, 总数=${allImages.length}`);
            
            // 确保masonryGrid存在
            if (!masonryGrid) {
                console.error("无法找到masonry-grid元素");
                return;
            }
            
            // 每次加载前，对剩余的图片重新洗牌
            if (currentIndex < allImages.length) {
                const remainingImages = allImages.slice(currentIndex);
                const shuffledRemaining = shuffleArray(remainingImages);
                allImages = [...allImages.slice(0, currentIndex), ...shuffledRemaining];
            }
            
            const endIndex = Math.min(currentIndex + batchSize, allImages.length);
            console.log(`加载从${currentIndex}到${endIndex}的图片`);
            
            for (let i = currentIndex; i < endIndex; i++) {
                if (allImages[i]) {
                    const imageElement = createImageElement(allImages[i]);
                    masonryGrid.appendChild(imageElement);
                }
            }
            
            // 更新当前索引
            currentIndex = endIndex;
            
            // 启用懒加载
            setupLazyLoading();
            
            // 如果所有图片都已加载，隐藏"加载更多"按钮
            if (currentIndex >= allImages.length && loadMoreBtn) {
                loadMoreBtn.style.display = 'none';
            }
        } catch (error) {
            console.error("加载更多图片时出错:", error);
        }
    }

    // 尝试多种初始化方法，确保脚本在页面加载后执行
    // 方法1: DOMContentLoaded
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOMContentLoaded 已触发");
        initializeMasonry();
    });
    
    // 方法2: window.onload
    window.onload = function() {
        console.log("window.onload 已触发");
        initializeMasonry();
    };
    
    // 方法3: 立即执行检查
    (function() {
        // 如果DOM已经准备好，立即初始化
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            console.log("DOM已经准备好，立即初始化");
            setTimeout(initializeMasonry, 0);
        }
    })();
</script>

<style>
    .masonry-grid-container {
        width: 100%;
        padding: 0 10px;
        box-sizing: border-box;
    }
    
    #masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        grid-auto-rows: 40px;
        grid-gap: 20px; /* 添加间距防止重叠 */
        width: 100%;
        margin-bottom: 30px;
        position: relative; /* 确保定位正确 */
    }
    
    .no-images-message {
        grid-column: 1 / -1;
        text-align: center;
        padding: 50px 0;
        font-size: 18px;
        color: #999;
    }
    
    .masonry-item {
        width: 100%;
        margin-bottom: 0;
        break-inside: avoid;
        position: relative;
        padding: 0px; /* 添加内边距增加元素间距 */
        box-sizing: border-box;
    }
    
    .image-container {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
        background-color: #f5f5f5;
        /* 添加这些属性来维持宽高比 */
        width: 100%;
        height: 0; /* 高度将通过padding-bottom来控制 */
    }
    
    .image-container:hover {
        transform: translateY(-5px);
    }
    
    .image-placeholder {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-animation 1.5s infinite;
        z-index: 1;
    }
    
    .image-container img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover; /* 保持图片比例并填充容器 */
        z-index: 2;
    }
    
    .lazy-image {
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    img:not(.lazy-image) {
        opacity: 1;
    }
    
    .image-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
        padding: 20px 10px 10px;
        box-sizing: border-box;
        z-index: 3;
    }
    
    .image-title {
        color: white;
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .image-description {
        color: rgba(255, 255, 255, 0.9);
        font-size: 0.9em;
    }
    
    .load-more-container {
        text-align: center;
        margin: 30px 0;
        padding-top: 20px; /* 增加顶部空间，防止按钮被图片覆盖 */
        position: relative; /* 确保不被覆盖 */
        z-index: 10; /* 提高层级 */
        clear: both;
    }
    
    .load-more-btn {
        padding: 10px 20px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    
    .load-more-btn:hover {
        background-color: #2980b9;
    }
    
    .loading-placeholder {
        width: 100%;
        margin: 20px 0;
    }
    
    .flex-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
    }
    
    .card.loading {
        width: 300px;
        height: 200px;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-animation 1.5s infinite;
        border-radius: 8px;
    }
    
    @keyframes loading-animation {
        0% {
            background-position: 200% 0;
        }
        100% {
            background-position: -200% 0;
        }
    }
    
    @media (max-width: 576px) {
        .card.loading {
            width: 100%;
            height: 150px;
        }
        
        #masonry-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            grid-gap: 10px;
        }
    }
</style>