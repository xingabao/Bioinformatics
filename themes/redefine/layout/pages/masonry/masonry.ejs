document.addEventListener('DOMContentLoaded', function() {
    // 获取所有图片数据
    let allImages = <%- JSON.stringify(images) %>;

    // 打乱图片数组顺序
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    // 初始化时随机排序图片
    allImages = shuffleArray(allImages);

    // 当前已加载的图片索引
    let currentIndex = 0;

    // 每次加载的图片数量
    const batchSize = <%= initialLoadCount %>;

    // 获取容器
    const masonryGrid = document.getElementById('masonry-grid');
    const loadMoreBtn = document.getElementById('load-more-btn');
    const loadingPlaceholder = document.querySelector('.loading-placeholder');

    // 隐藏加载占位符
    function hideLoadingPlaceholder() {
        if (loadingPlaceholder) {
            loadingPlaceholder.style.display = 'none';
        }
        masonryGrid.style.display = 'grid';
    }

    // 预加载图片尺寸
    async function preloadImageDimensions(imageData) {
        return new Promise((resolve) => {
            const img = new Image();
            img.src = imageData.image;
            img.onload = () => {
                imageData.width = img.naturalWidth;
                imageData.height = img.naturalHeight;
                resolve(imageData);
            };
            img.onerror = () => {
                // 错误时返回默认尺寸
                imageData.width = 300;
                imageData.height = 200;
                resolve(imageData);
            };
        });
    }

    // 创建图片元素
    function createImageElement(imageData) {
        const item = document.createElement('div');
        item.className = 'masonry-item';

        item.innerHTML = `
            <div class="image-container">
                <img data-src="${imageData.image}" alt="${imageData.title || ''}" class="lazy-image">
                <div class="image-overlay">
                    <div class="image-title">${imageData.title || ''}</div>
                    <div class="image-description">${imageData.description || ''}</div>
                </div>
            </div>
        `;

        // 如果已有尺寸信息，立即设置行跨度
        if (imageData.width && imageData.height) {
            setRowSpan(item, imageData);
        }

        return item;
    }

    // 设置行跨度
    function setRowSpan(item, imageData) {
        const container = item.querySelector('.image-container');
        const rowHeight = 40; // 匹配 grid-auto-rows: 40px
        let contentHeight;

        if (imageData && imageData.width && imageData.height) {
            // 使用预加载的尺寸计算高度
            const aspectRatio = imageData.height / imageData.width;
            const containerWidth = container.offsetWidth || 250; // 假设容器宽度
            contentHeight = containerWidth * aspectRatio;
        } else {
            // 回退：使用实际容器高度
            contentHeight = container.offsetHeight || 200;
        }

        const rowSpan = Math.ceil(contentHeight / rowHeight);
        item.style.gridRow = `span ${rowSpan}`;
    }

    // 懒加载图片
    function setupLazyLoading() {
        const lazyImages = document.querySelectorAll('.lazy-image');

        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.classList.remove('lazy-image');

                        // 图片加载后微调行跨度（如果需要）
                        img.onload = function() {
                            const item = img.closest('.masonry-item');
                            // 可选择性地重新调整行跨度
                            setRowSpan(item, {
                                width: img.naturalWidth,
                                height: img.naturalHeight
                            });
                        };

                        imageObserver.unobserve(img);
                    }
                });
            }, {
                rootMargin: '200px 0px'
            });

            lazyImages.forEach(img => imageObserver.observe(img));
        } else {
            lazyImages.forEach(img => {
                img.src = img.dataset.src;
                img.onload = function() {
                    img.classList.remove('lazy-image');
                    const item = img.closest('.masonry-item');
                    setRowSpan(item, {
                        width: img.naturalWidth,
                        height: img.naturalHeight
                    });
                };
            });
        }
    }

    // 加载更多图片
    async function loadMoreImages() {
        // 每次加载前，对剩余的图片重新洗牌
        if (currentIndex < allImages.length) {
            const remainingImages = allImages.slice(currentIndex);
            const shuffledRemaining = shuffleArray(remainingImages);
            allImages = [...allImages.slice(0, currentIndex), ...shuffledRemaining];
        }

        const endIndex = Math.min(currentIndex + batchSize, allImages.length);

        // 预加载当前批次的图片尺寸
        const preloadPromises = [];
        for (let i = currentIndex; i < endIndex; i++) {
            if (allImages[i]) {
                preloadPromises.push(preloadImageDimensions(allImages[i]));
            }
        }

        // 等待所有尺寸加载完成
        await Promise.all(preloadPromises);

        // 创建并添加图片元素
        for (let i = currentIndex; i < endIndex; i++) {
            if (allImages[i]) {
                const imageElement = createImageElement(allImages[i]);
                masonryGrid.appendChild(imageElement);
            }
        }

        // 更新当前索引
        currentIndex = endIndex;

        // 启用懒加载
        setupLazyLoading();

        // 如果所有图片都已加载，隐藏"加载更多"按钮
        if (currentIndex >= allImages.length) {
            loadMoreBtn.style.display = 'none';
        }
    }

    // 窗口大小调整处理
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            document.querySelectorAll('.masonry-item').forEach(item => {
                const img = item.querySelector('img');
                const imageData = allImages.find(data => data.image === (img.src || img.dataset.src));
                setRowSpan(item, imageData);
            });
        }, 100);
    });

    // 加载更多按钮点击事件
    loadMoreBtn.addEventListener('click', loadMoreImages);

    // 初始化
    async function init() {
        hideLoadingPlaceholder();
        await loadMoreImages();
    }

    // 开始初始化
    init();
});