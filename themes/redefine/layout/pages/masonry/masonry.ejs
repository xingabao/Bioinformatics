<%
// Define an array of images to display in the masonry layout
const images = theme.masonry;
// 初始加载的图片数量
const initialLoadCount = 10;
%>

<h1 class="page-title-header">
    <%- getPageTitle(page) %>
</h1>

<h4>第一次打开好像不能自动显示，要刷新一下此页面才行，暂时还没找到具体原因，后面再修复吧。</h4>
<br>

<div class="loading-placeholder">
	<div style="display: none; flex-wrap: wrap; gap: 5px; width: 100%;" class="flex-grid generic-card">
		<div style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;" class="card loading"></div>
		<div style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;" class="card loading"></div>
		<div style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;" class="card loading"></div>
		<div style="flex: 1 0 calc(25% - 5px); height: 200px; min-width: 150px; background-color: #FFFFFF; border-radius: 5px; position: relative; overflow: hidden;" class="card loading"></div>
	</div>
</div>

<div class="masonry-grid-container">
    <div id="masonry-grid"></div>
</div>

<div class="load-more-container">
    <button id="load-more-btn" class="load-more-btn">加载更多</button>
</div>

<!-- 添加大图查看模态框 -->
<div id="image-modal" class="image-modal">
    <span class="close-modal">&times;</span>
    <img id="modal-image" class="modal-content">
    <div id="modal-caption"></div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // 获取所有图片数据
        let allImages = <%- JSON.stringify(images) %>;
        
        // 打乱图片数组顺序
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }
        
        // 初始化时随机排序图片
        allImages = shuffleArray(allImages);
        
        // 当前已加载的图片索引
        let currentIndex = 0;
        
        // 每次加载的图片数量
        const batchSize = <%= initialLoadCount %>;
        
        // 获取容器
        const masonryGrid = document.getElementById('masonry-grid');
        const loadMoreBtn = document.getElementById('load-more-btn');
        const loadingPlaceholder = document.querySelector('.loading-placeholder');
        
        // 模态框元素
        const modal = document.getElementById('image-modal');
        const modalImg = document.getElementById('modal-image');
        const modalCaption = document.getElementById('modal-caption');
        const closeModal = document.querySelector('.close-modal');
        
        // 关闭模态框
        if (closeModal) {
            closeModal.onclick = function() {
                modal.style.display = "none";
            }
        }
        
        // 点击模态框外部关闭
        window.onclick = function(event) {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        }
        
        // 添加图片点击事件处理
        function setupImageClickHandlers() {
            const images = document.querySelectorAll('.masonry-item img:not(.has-click-handler)');
            images.forEach(img => {
                img.classList.add('has-click-handler'); // 标记已添加点击处理器
                img.addEventListener('click', function() {
                    modal.style.display = "block";
                    modalImg.src = this.src;
                    
                    // 获取标题和描述
                    const overlayDiv = this.nextElementSibling;
                    if (overlayDiv) {
                        const title = overlayDiv.querySelector('.image-title');
                        const description = overlayDiv.querySelector('.image-description');
                        let captionText = "";
                        
                        if (title && title.textContent) {
                            captionText += title.textContent;
                        }
                        
                        if (description && description.textContent) {
                            if (captionText) captionText += " - ";
                            captionText += description.textContent;
                        }
                        
                        modalCaption.textContent = captionText;
                    }
                });
            });
        }
        
        // 隐藏加载占位符
        function hideLoadingPlaceholder() {
            if (loadingPlaceholder) {
                loadingPlaceholder.style.display = 'none';
            }
            masonryGrid.style.display = 'grid';
        }
        
        // 创建图片元素
        function createImageElement(imageData) {
            const item = document.createElement('div');
            item.className = 'masonry-item';
            
            // 添加占位符和默认宽高比数据
            const aspectRatio = imageData.aspectRatio || 1.5; // 默认宽高比，如果没有提供
            
            item.innerHTML = `
                <div class="image-container" style="padding-bottom: ${(1/aspectRatio) * 100}%;">
                    <div class="image-placeholder"></div>
                    <img data-src="${imageData.image}" alt="${imageData.title || ''}" class="lazy-image">
                    <div class="image-overlay">
                        <div class="image-title">${imageData.title || ''}</div>
                        <div class="image-description">${imageData.description || ''}</div>
                    </div>
                </div>
            `;
            
            // 预加载图片以获取准确尺寸
            const tempImg = new Image();
            tempImg.onload = function() {
                const actualRatio = tempImg.width / tempImg.height;
                item.querySelector('.image-container').style.paddingBottom = `${(1/actualRatio) * 100}%`;
                setRowSpan(item);
            };
            tempImg.src = imageData.image;
            
            return item;
        }
        
        // 设置行跨度
        function setRowSpan(item) {
            const container = item.querySelector('.image-container');
            const rowHeight = 55; // 与CSS中的grid-auto-rows保持一致
            const contentHeight = container.offsetHeight;
            const rowSpan = Math.ceil(contentHeight / rowHeight);
            item.style.gridRow = `span ${rowSpan}`;
        }
        
        // 懒加载图片
        function setupLazyLoading() {
            const lazyImages = document.querySelectorAll('.lazy-image:not(.loading)');
            let imagesLoaded = 0;
            let totalImages = lazyImages.length;
            
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            
                            // 设置图片加载状态类
                            img.classList.add('loading');
                            
                            img.onload = function() {
                                img.classList.remove('lazy-image', 'loading');
                                // 图片加载后微调布局
                                const item = img.closest('.masonry-item');
                                requestAnimationFrame(() => {
                                    setRowSpan(item);
                                });
                                
                                // 隐藏占位符
                                const placeholder = img.previousElementSibling;
                                if (placeholder && placeholder.classList.contains('image-placeholder')) {
                                    placeholder.style.display = 'none';
                                }
                                
                                // 跟踪加载进度
                                imagesLoaded++;
                                
                                // 当所有图片加载完毕时显示加载更多按钮
                                if (imagesLoaded >= totalImages) {
                                    loadMoreBtn.style.display = 'block';
                                    // 设置点击处理程序
                                    setupImageClickHandlers();
                                }
                            };
                            
                            img.src = img.dataset.src;
                            imageObserver.unobserve(img);
                        }
                    });
                }, {
                    rootMargin: '200px 0px'
                });
                
                lazyImages.forEach(img => {
                    imageObserver.observe(img);
                });
            } else {
                // 浏览器不支持 IntersectionObserver 的回退
                lazyImages.forEach(img => {
                    img.classList.add('loading');
                    img.onload = function() {
                        img.classList.remove('lazy-image', 'loading');
                        const item = img.closest('.masonry-item');
                        setRowSpan(item);
                        
                        // 隐藏占位符
                        const placeholder = img.previousElementSibling;
                        if (placeholder && placeholder.classList.contains('image-placeholder')) {
                            placeholder.style.display = 'none';
                        }
                        
                        // 跟踪加载进度
                        imagesLoaded++;
                        
                        // 当所有图片加载完毕时显示加载更多按钮
                        if (imagesLoaded >= totalImages) {
                            loadMoreBtn.style.display = 'block';
                            // 设置点击处理程序
                            setupImageClickHandlers();
                        }
                    };
                    img.src = img.dataset.src;
                });
            }
            
            // 如果没有图片需要加载，直接显示按钮并设置点击处理程序
            if (totalImages === 0) {
                loadMoreBtn.style.display = 'block';
                setupImageClickHandlers();
            }
        }
        
        // 加载更多图片
        function loadMoreImages() {
            // 隐藏加载更多按钮直到加载完成
            loadMoreBtn.style.display = 'none';
            
            // 每次加载前，对剩余的图片重新洗牌
            if (currentIndex < allImages.length) {
                const remainingImages = allImages.slice(currentIndex);
                const shuffledRemaining = shuffleArray(remainingImages);
                allImages = [...allImages.slice(0, currentIndex), ...shuffledRemaining];
            }
            
            const endIndex = Math.min(currentIndex + batchSize, allImages.length);
            
            for (let i = currentIndex; i < endIndex; i++) {
                if (allImages[i]) {
                    const imageElement = createImageElement(allImages[i]);
                    masonryGrid.appendChild(imageElement);
                }
            }
            
            // 更新当前索引
            currentIndex = endIndex;
            
            // 启用懒加载
            setupLazyLoading();
            
            // 如果所有图片都已加载，隐藏"加载更多"按钮
            if (currentIndex >= allImages.length) {
                loadMoreBtn.style.display = 'none';
            }
        }
        
        // 窗口大小调整处理
        let resizeTimeout;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                // 重新计算所有已加载图片的行跨度
                document.querySelectorAll('.masonry-item').forEach(item => {
                    setRowSpan(item);
                });
            }, 100);
        });
        
        // 加载更多按钮点击事件
        loadMoreBtn.addEventListener('click', loadMoreImages);
        
        // 初始化
        function init() {
            hideLoadingPlaceholder();
            loadMoreImages();
            // 为初始加载的图片添加点击事件
            setupImageClickHandlers();
        }
        
        // 开始初始化
        init();
    });
</script>

<style>
    .masonry-grid-container {
        width: 100%;
        padding: 0 10px;
        box-sizing: border-box;
    }
    
    #masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        grid-auto-rows: 40px;
        grid-gap: 20px; /* 添加间距防止重叠 */
        width: 100%;
        margin-bottom: 30px;
        position: relative; /* 确保定位正确 */
    }
    
    .masonry-item {
        width: 100%;
        margin-bottom: 0;
        break-inside: avoid;
        position: relative;
        padding: 0px; /* 添加内边距增加元素间距 */
        box-sizing: border-box;
    }
    
    .image-container {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
        background-color: #f5f5f5;
        /* 添加这些属性来维持宽高比 */
        width: 100%;
        height: 0; /* 高度将通过padding-bottom来控制 */
    }
    
    .image-container:hover {
        transform: translateY(-5px);
    }
    
    .image-placeholder {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-animation 1.5s infinite;
        z-index: 1;
    }
    
    .image-container img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover; /* 保持图片比例并填充容器 */
        z-index: 2;
        cursor: pointer; /* 添加指针样式表明可点击 */
    }
    
    .lazy-image {
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    img:not(.lazy-image) {
        opacity: 1;
    }
    
    .image-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
        padding: 20px 10px 10px;
        box-sizing: border-box;
        z-index: 3;
    }
    
    .image-title {
        color: white;
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .image-description {
        color: rgba(255, 255, 255, 0.9);
        font-size: 0.9em;
    }
    
    .load-more-container {
        text-align: center;
        margin: 30px 0;
        padding-top: 20px; /* 增加顶部空间，防止按钮被图片覆盖 */
        position: relative; /* 确保不被覆盖 */
        z-index: 10; /* 提高层级 */
        clear: both;
    }
    
    .load-more-btn {
        padding: 10px 20px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    
    .load-more-btn:hover {
        background-color: #2980b9;
    }
    
    .loading-placeholder {
        width: 100%;
        margin: 20px 0;
    }
    
    .flex-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
    }
    
    .card.loading {
        width: 300px;
        height: 200px;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-animation 1.5s infinite;
        border-radius: 8px;
    }
    
    /* 大图查看模态框样式 */
    .image-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        padding-top: 50px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.9);
    }
    
    .modal-content {
        margin: auto;
        display: block;
        max-width: 90%;
        max-height: 80vh;
        object-fit: contain;
    }
    
    #modal-caption {
        margin: auto;
        display: block;
        width: 80%;
        max-width: 700px;
        text-align: center;
        color: #ccc;
        padding: 10px 0;
        height: 50px;
    }
    
    .close-modal {
        position: absolute;
        top: 15px;
        right: 35px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        transition: 0.3s;
        cursor: pointer;
    }
    
    .close-modal:hover,
    .close-modal:focus {
        color: #bbb;
        text-decoration: none;
        cursor: pointer;
    }
    
    @keyframes loading-animation {
        0% {
            background-position: 200% 0;
        }
        100% {
            background-position: -200% 0;
        }
    }
    
    @media (max-width: 576px) {
        .card.loading {
            width: 100%;
            height: 150px;
        }
        
        #masonry-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            grid-gap: 10px;
        }
        
        .modal-content {
            max-width: 95%;
        }
    }
</style>